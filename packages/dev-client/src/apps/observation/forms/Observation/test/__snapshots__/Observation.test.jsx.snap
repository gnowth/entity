// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
.c4 {
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid hsl(0,0%,80%);
  border-radius: 4px;
  padding: 9px;
  width: 100%;
}

.c4:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c7 {
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid hsl(0,0%,80%);
  border-radius: 4px;
  padding: 9px;
  width: 100%;
  height: 100px;
  resize: none;
}

.c7:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c1 {
  color: #000;
  font-family: Arial,Sans-Serif;
  font-size: 1rem;
  margin: 0;
  opacity: 0.6;
  padding: 0;
}

.c6 {
  display: inline-block;
}

.c11 {
  display: inline-block;
  margin-left: 24px;
}

.c0 {
  margin-top: 24px;
}

.c8 {
  margin-top: 48px;
}

.c5 {
  display: inline-block;
  position: relative;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c3 {
  display: block;
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid hsl(0,0%,80%);
  border-radius: 4px;
  padding: 9px;
  width: 100%;
}

.c3:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c2 .react-datepicker-wrapper {
  display: block;
}

.c2 .react-datepicker__input-container {
  display: block;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<div>
  <div
    className=""
  />
  <div
    className=""
  />
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Observation Date
    </label>
    <div
      className="c2"
    >
      <div
        className="react-datepicker-wrapper"
      >
        <div
          className="react-datepicker__input-container"
        >
          <input
            className="c3"
            disabled={false}
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            readOnly={false}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Title
    </label>
    <input
      className="c4"
      errors={Immutable.List []}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      name="title"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="main"
    />
  </div>
  <div>
    <div
      className="c5"
    >
      
      
      <button
        className="c6"
        onClick={[Function]}
        to=""
      >
        Test
      </button>
    </div>
  </div>
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Short Title
    </label>
    <input
      className="c4"
      errors={Immutable.List []}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      name="title_short"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="main"
    />
  </div>
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Description
    </label>
    <textarea
      className="c7"
      errors={Immutable.List []}
      name="description"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="main"
    />
  </div>
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Due Date
    </label>
    <div
      className="c2"
    >
      <div
        className="react-datepicker-wrapper"
      >
        <div
          className="react-datepicker__input-container"
        >
          <input
            className="c3"
            disabled={false}
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            readOnly={false}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="c0"
  >
    <label
      className="c1 "
    >
      Follow up actions
    </label>
  </div>
  
  
  <button
    className="c6"
    disabled={false}
    onClick={[Function]}
    to=""
  >
    Add action
  </button>
  <div
    className="c8"
  >
    <div
      className="c9"
    >
      
      
      <button
        className="c6"
        disabled={false}
        onClick={[Function]}
        to=""
      >
        RESET
      </button>
      <div
        className="c10"
      />
      
      
      <button
        className="c11"
        disabled={false}
        onClick={[Function]}
        to=""
      >
        SAVE
      </button>
      
      
      <button
        className="c11"
        disabled={false}
        onClick={[Function]}
        to=""
      >
        SUBMIT
      </button>
    </div>
  </div>
</div>
`;
