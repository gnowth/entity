// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
.c6 {
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid #03a9f4;
  border-radius: 4px;
  padding: 9px;
  width: 100%;
}

.c6:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c11 {
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid #03a9f4;
  border-radius: 4px;
  padding: 9px;
  width: 100%;
  height: 100px;
  resize: none;
}

.c11:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c9.c9 {
  font-size: 1rem;
}

.c17 {
  color: #ffffff;
}

.c17.c17 {
  font-size: 1rem;
}

.c2 {
  font-size: 0.875rem;
  font-weight: 400;
  -webkit-letter-spacing: 0.25px;
  -moz-letter-spacing: 0.25px;
  -ms-letter-spacing: 0.25px;
  letter-spacing: 0.25px;
}

.c10 {
  font-size: 0.875rem;
  font-weight: 500;
  -webkit-letter-spacing: 1.25px;
  -moz-letter-spacing: 1.25px;
  -ms-letter-spacing: 1.25px;
  letter-spacing: 1.25px;
  text-transform: uppercase;
}

.c18 {
  color: #ffffff;
  font-size: 0.875rem;
  font-weight: 500;
  -webkit-letter-spacing: 1.25px;
  -moz-letter-spacing: 1.25px;
  -ms-letter-spacing: 1.25px;
  letter-spacing: 1.25px;
  text-transform: uppercase;
}

.c8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: transparent;
  border: 0;
  border-radius: 0.25em;
  cursor: pointer;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  padding: 0.5em 1.5em;
  position: relative;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c8:hover {
  background-color: #fdfdfd;
}

.c8:focus {
  background-color: #fbfbfb;
}

.c8:disabled {
  background-color: #f8f8f8;
  cursor: auto;
}

.c8:disabled * {
  color: #e9e9e9;
}

.c15 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: transparent;
  border: 0;
  border-radius: 0.25em;
  cursor: pointer;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  padding: 0.5em 1.5em;
  position: relative;
  -webkit-text-decoration: none;
  text-decoration: none;
  margin-left: 24px;
}

.c15:hover {
  background-color: #fdfdfd;
}

.c15:focus {
  background-color: #fbfbfb;
}

.c15:disabled {
  background-color: #f8f8f8;
  cursor: auto;
}

.c15:disabled * {
  color: #e9e9e9;
}

.c16 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: transparent;
  border: 0;
  border-radius: 0.25em;
  cursor: pointer;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  outline: none;
  padding: 0.5em 1.5em;
  position: relative;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-color: #4caf50;
  min-width: 8rem;
  margin-left: 24px;
}

.c16:hover {
  background-color: #fdfdfd;
}

.c16:focus {
  background-color: #fbfbfb;
}

.c16:disabled {
  background-color: #f8f8f8;
  cursor: auto;
}

.c16:disabled * {
  color: #e9e9e9;
}

.c16:hover {
  background-color: #67bb6a;
}

.c16:focus {
  background-color: #3c9f40;
}

.c16:disabled {
  background-color: #f8f8f8;
  cursor: auto;
}

.c16:disabled * {
  color: #e9e9e9;
}

.c0 {
  padding: 1rem;
}

.c3 {
  font-size: 0.875rem;
  font-weight: 400;
  -webkit-letter-spacing: 0.25px;
  -moz-letter-spacing: 0.25px;
  -ms-letter-spacing: 0.25px;
  letter-spacing: 0.25px;
}

.c1 {
  margin-top: 24px;
}

.c7 {
  display: inline-block;
  position: relative;
}

.c14 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c5 {
  display: block;
  width: 100%;
  background-color: hsl(0,0%,98%);
  border: 1px solid #03a9f4;
  border-radius: 4px;
  padding: 9px;
  width: 100%;
}

.c5:focus {
  background-color: white;
  border-color: #2684ff;
  outline: none;
  box-shadow: 0 0 0 1px #2684ff;
}

.c4 .react-datepicker-wrapper {
  display: block;
}

.c4 .react-datepicker__input-container {
  display: block;
}

.c13 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c12 {
  margin-top: 48px;
}

@media print {
  .c2 {
    color: #000000;
  }
}

@media print {
  .c10 {
    color: #000000;
  }
}

@media print {
  .c18 {
    color: #000000;
  }
}

@media print {
  .c8 {
    display: none;
  }
}

@media print {
  .c15 {
    display: none;
  }
}

@media print {
  .c16 {
    display: none;
  }
}

<div
  className="c0"
>
  <div
    className=""
  />
  <div
    className=""
  />
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Observation Date
    </label>
    <div
      className="c4"
    >
      <div
        className="react-datepicker-wrapper"
      >
        <div
          className="react-datepicker__input-container"
        >
          <input
            className="c5"
            disabled={false}
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            readOnly={false}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Title
    </label>
    <input
      className="c6"
      errors={Immutable.List []}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      name="title"
      namespace="component_widgetInput"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="standard"
    />
  </div>
  <div>
    <div
      className="c7"
    >
      <button
        className="c8"
        onClick={[Function]}
      >
        <i
          className="uiButton-Icon icon icon-name uiButton-Icon c9"
          hidden={true}
          name="name"
        />
        <span
          className="uiButton-Content c10"
        >
          Test
        </span>
      </button>
    </div>
  </div>
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Short Title
    </label>
    <input
      className="c6"
      errors={Immutable.List []}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      name="title_short"
      namespace="component_widgetInput"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="standard"
    />
  </div>
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Description
    </label>
    <textarea
      className="c11"
      errors={Immutable.List []}
      name="description"
      namespace="component_widgetTextarea"
      onChange={[Function]}
      onSubmit={[Function]}
      value=""
      variant="standard"
    />
  </div>
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Due Date
    </label>
    <div
      className="c4"
    >
      <div
        className="react-datepicker-wrapper"
      >
        <div
          className="react-datepicker__input-container"
        >
          <input
            className="c5"
            disabled={false}
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            readOnly={false}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="c1"
  >
    <label
      className="c2 c3"
    >
      Follow up actions
    </label>
  </div>
  <button
    className="c8"
    content={
      Object {
        "defaultMessage": "Add action",
        "id": "packages.dev-client.src.apps.observation.screens.Observation.follow_up_actions_add",
      }
    }
    disabled={false}
    onClick={[Function]}
  >
    <i
      className="uiButton-Icon icon icon-name uiButton-Icon c9"
      hidden={true}
      name="name"
    />
    <span
      className="uiButton-Content c10"
      hidden={false}
    >
      Add action
    </span>
  </button>
  <div
    className=""
  >
    <div
      className="c12 c13"
    >
      <button
        className="c8"
        content={
          Object {
            "defaultMessage": "RESET",
            "id": "packages.dev-client.src.apps.activity.forms.Controls.reset",
          }
        }
        disabled={false}
        onClick={[Function]}
      >
        <i
          className="uiButton-Icon icon icon-name uiButton-Icon c9"
          hidden={true}
          name="name"
        />
        <span
          className="uiButton-Content c10"
          hidden={false}
        >
          RESET
        </span>
      </button>
      <div
        className="c14"
      />
      <button
        className="c15"
        content={
          Object {
            "defaultMessage": "SAVE",
            "id": "packages.dev-client.src.apps.activity.forms.Controls.save",
          }
        }
        disabled={false}
        onClick={[Function]}
      >
        <i
          className="uiButton-Icon icon icon-name uiButton-Icon c9"
          hidden={true}
          name="name"
        />
        <span
          className="uiButton-Content c10"
          hidden={false}
        >
          SAVE
        </span>
      </button>
      <button
        className="c16"
        content={
          Object {
            "defaultMessage": "SUBMIT",
            "id": "packages.dev-client.src.apps.activity.forms.Controls.submit",
          }
        }
        disabled={false}
        onClick={[Function]}
      >
        <i
          className="uiButton-Icon icon icon-name uiButton-Icon c17"
          hidden={true}
          name="name"
        />
        <span
          className="uiButton-Content c18"
          hidden={false}
        >
          SUBMIT
        </span>
      </button>
    </div>
  </div>
</div>
`;
